using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ссылочные_и_значимые_типы__данных_урок_38
{
    internal class Program
    {



        // ПРИМЕР СТИРАНИЯ ДАННЫХ В СТЕКЕ В ЗНАЧИМОМ ТИПЕ ДАННЫХ
        /*             static void Foo(int value)               // Входящим Параметром в переменную а (value), для Метода Foo, мы получили 1!!!
                     {
                         value = 5;
                     }                                        // Когда мы выйдем из контекста выполнения Метода Foo, данные переменной value просто исчезнут,
                                                              // поэтому в консоли мы получим 1.

                       static void Main(string[] args)
                     {                                    // Эти фигурные скобки есть Область Видимости или Контекст выполнения
                       int a = 1;
                       Foo(a);                            // Когда мы передаем в круглые скобки (а), в качестве Аргумента переменную выше int a = 1,
                                                          // то когда у нас вызывается Метод Foo, данные из этой переменной, коипруются в переменную метода Foo,
                                                          // которую мы указали в качестве входящего Параметра выше!!! Причем они не обязательно должны называться одинково!!!
                                                          // Поэтому в Методе Foo, мы специльно поменяли название переменной с а на value. МЫ ПРОСТО КОПИРУЕМ ЗНАЧЕНИЕ а В value.
                       Console.WriteLine(a);
                     }
        */
        // ПРИМЕР СОХРАНЕНИЯ ДАННЫХ В ССЫЛОЧНОМ ТИПЕ ДАННЫХ
        /*
        static void Bar(int[] arr)                    // Передали Ссылку! на массива а, пофиг что название другое, arr ссылка на ту же Кучу что и а!
            {
                arr[0] = 5;                           // Меняем элемент массива с 1 на 5. Значение элемента массива сохраняется в Куче, поэтому когда
                                                      // контекст выполнения метода Bar закончится, данные не исчезнут, а появятся на консоли в методе WriteLine.
            }
            
            static void Main(string[] args)
            {
            int[] a = new int[1];                     // Создали массив на один элемент. а это лишь ярлык ссылающийся на кучу!
            a[0] = 1;                                 // Поместили в элемент этого массива 1
            Bar(a);                                   // Поместили входящим Параметром в метод Bar ссылку! на массив а и вызвали метод Bar
            Console.WriteLine(a);
            } 
        */









        // ПЕРВЫЙ ПРИМЕР С ОПИСАНИЕМ, КАК КОПИРУЮТСЯ ЗНАЧИМЫЕ И ССЫЛОЧНЫЕ ТИПЫ ДАННЫХ           
        /*         int a = 2;              // Это Тип данных Структура, Данные запишутся в Стек. Данные будут храниться до тех пор, пока выполняется код в этом Контексте.




                   int [] b = new int [10];   // Это Тип данных Класс (Массивы наследники класса Array), значит данные запишутся в Управляемую кучу.
                                              // Данные будут храниться в Управляемой куче, а следовательно, когда программа пройдет данный контекст,
                                              // то удалится Ссылка с адресом, где находятся данные массива, а не сам Массив с данными.
                                              // То есть переменная b, просто является ссылкой на то место где находится наш массив.


                   int c;
                   c = a;                     // Если мы Скопируем один значимый тип данных в другой значимый тип данных, то в Стеке получим две одинаковые области
                                              // памяти занятые одинаковым значенем


                   int[] g;
                   g = b; 

                                              // Эти фигурные скобки есть Область Видимости или Контекст выполнения
        */
    }
}
