using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Разработка_списка_дел
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*
 
string str = null;               // Стринг это класс, ссылочный тип, поэтому ошибки нет

int a = null;                    // Инт это струкутура, значимый тип, а значит ошибка

DateTime dateTime = null;

*/

            // Применяем Nullable фичу (знак ? после типа данных), а так же добавляем поля HasValue и Value. 
            /* 
            int? i = null;       // Сделали из Значимого типа - Nullable тип

            i.HasValue           // Когда мы превращаем значимый тип в Nullable тип, мы получаем изменения в виде появления двух Полей. Если мы обратимся к переменной i, 
                                 // то увидим там два дополнительных поля: HasValue и Value. HasValue - это Булиевая переменная, которая говорит есть ли у этой переменной значение или нет. 
                                 // Таким образом, значение переменной HasValue будет false, так как в переменную i, мы поместили null.
                                 // Если вместо null поместим другое значение, то HasValue будет true.       
            i.Value
            */

            // Рассмотрим типичные операции в случае если мы работаем с Nullable типом:

            int? i = null;                               // Nallable переменная, типа int, которая называется i. Мы присвоили ей null.  
            Console.WriteLine(i == null);                // В консоли появится true, потому что в строчке выше мы указали что i = null.
            Console.WriteLine(i.HasValue);               // В консоли появится false, потому что мы обратились к полю HasValue и вывели ее значение на консоль
            Console.WriteLine(i.GetValueOrDefault());    // GetValueOrDefault это дополнительный Метод, который мы можем вызвать для переменной или объекта, если они являются типом Nullable.
                                                         // Работает он следующим образом: он возвращает дефолтное значение в i, то есть то значение, которое мы присвоили в i. Если i
                                                         // мы ничего не присваивали, он вернет значение, указанное в (), если в скобках мы ничего не указали, то он вернет стандартное
                                                         // значение для переменной int - 0.

            Console.WriteLine(i.GetValueOrDefault(5));   // На этот раз мы поместим в метод значение 5, а метод вернет его и мы получим  i = 5

            Console.WriteLine(i ?? 55);                  // Тут мы используем оператор Объединения с null. Этот оператор проверяет переменную на null, и если там реально null, то он
                                                         // возвращает туда 55, если же там не null, то он вернет реальное значение i, чем то похоже на метод выше. Обычно используется именно 
                                                         // этот Оператор, метод GetValueOrDefault используется очень редко.

            Console.WriteLine(i.Value);                  // Вызываем переменную i и обращаемся к ее полю Value. Но переменной i присвоено значение null, поэтому мы получим ошибку в консоли.
                                                         // Если бы это было какое то приложение, которое хотело бы получить доступ к этим данным, то оно бы на этой строчке упало, если бы
                                                         // мы не поставили блок try catch. Поэтому перед обращением к переменной i, нужно проверять эту переменную на null значение,
                                                         // операциями описанными выше

        }
    }
}
